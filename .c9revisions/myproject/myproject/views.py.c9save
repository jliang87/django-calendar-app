{"ts":1365356957220,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import time\nimport calendar\nfrom datetime import date, datetime, timedelta\n\nfrom django.core.urlresolvers import reverse\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponseRedirect, HttpResponse\nfrom django.shortcuts import get_object_or_404, render_to_response\nfrom django.core.context_processors import csrf\nfrom django.forms.models import modelformset_factory\nfrom django.template import RequestContext\n\nfrom dbe.cal.models import *\n\nmnames = \"January February March April May June July August September October November December\"\nmnames = mnames.split()\n\n\ndef _show_users(request):\n    \"\"\"Return show_users setting; if it does not exist, initialize it.\"\"\"\n    s = request.session\n    if not \"show_users\" in s:\n        s[\"show_users\"] = True\n    return s[\"show_users\"]\n\n@login_required\ndef settings(request):\n    \"\"\"Settings screen.\"\"\"\n    s = request.session\n    _show_users(request)\n    if request.method == \"POST\":\n        s[\"show_users\"] = (True if \"show_users\" in request.POST else False)\n    return render_to_response(\"cal/settings.html\", add_csrf(request, show_users=s[\"show_users\"]), context_instance=RequestContext(request))\n\ndef reminders(request):\n    \"\"\"Return the list of reminders for today and tomorrow.\"\"\"\n    year, month, day = time.localtime()[:3]\n    reminders = Entry.objects.filter(date__year=year, date__month=month,\n                                   date__day=day, creator=request.user, remind=True)\n    tomorrow = datetime.now() + timedelta(days=1)\n    year, month, day = tomorrow.timetuple()[:3]\n    return list(reminders) + list(Entry.objects.filter(date__year=year, date__month=month,\n                                   date__day=day, creator=request.user, remind=True))\n\n@login_required\ndef main(request, year=None):\n    \"\"\"Main listing, years and months; three years per page.\"\"\"\n    # prev / next years\n    if year: year = int(year)\n    else:    year = time.localtime()[0]\n\n    nowy, nowm = time.localtime()[:2]\n    lst = []\n\n    # create a list of months for each year, indicating ones that contain entries and current\n    for y in [year, year+1, year+2]:\n        mlst = []\n        for n, month in enumerate(mnames):\n            entry = current = False   # are there entry(s) for this month; current month?\n            entries = Entry.objects.filter(date__year=y, date__month=n+1)\n            if not _show_users(request):\n                entries = entries.filter(creator=request.user)\n\n            if entries:\n                entry = True\n            if y == nowy and n+1 == nowm:\n                current = True\n            mlst.append(dict(n=n+1, name=month, entry=entry, current=current))\n        lst.append((y, mlst))\n\n    return render_to_response(\"cal/main.html\", dict(years=lst, user=request.user, year=year,\n                                                   reminders=reminders(request)),\n                                                   context_instance=RequestContext(request))\n\n@login_required\ndef month(request, year, month, change=None):\n    \"\"\"Listing of days in `month`.\"\"\"\n    year, month = int(year), int(month)\n\n    # apply next / previous change\n    if change in (\"next\", \"prev\"):\n        now, mdelta = date(year, month, 15), timedelta(days=31)\n        if change == \"next\":   mod = mdelta\n        elif change == \"prev\": mod = -mdelta\n\n        year, month = (now+mod).timetuple()[:2]\n\n    # init variables\n    cal = calendar.Calendar()\n    month_days = cal.itermonthdays(year, month)\n    nyear, nmonth, nday = time.localtime()[:3]\n    lst = [[]]\n    week = 0\n\n    # make month lists containing list of days for each week\n    # each day tuple will contain list of entries and 'current' indicator\n    for day in month_days:\n        entries = current = False   # are there entries for this day; current day?\n        if day:\n            entries = Entry.objects.filter(date__year=year, date__month=month, date__day=day)\n            if not _show_users(request):\n                entries = entries.filter(creator=request.user)\n            if day == nday and year == nyear and month == nmonth:\n                current = True\n\n        lst[week].append((day, entries, current))\n        if len(lst[week]) == 7:\n            lst.append([])\n            week += 1\n\n    return render_to_response(\"cal/month.html\", dict(year=year, month=month, user=request.user,\n                        month_days=lst, mname=mnames[month-1], reminders=reminders(request)),\n                        context_instance=RequestContext(request))\n\n@login_required\ndef day(request, year, month, day):\n    \"\"\"Entries for the day.\"\"\"\n    EntriesFormset = modelformset_factory(Entry, extra=1, exclude=(\"creator\", \"date\"),\n                                          can_delete=True)\n    other_entries = []\n    if _show_users(request):\n        other_entries = Entry.objects.filter(date__year=year, date__month=month,\n                                       date__day=day).exclude(creator=request.user)\n\n    if request.method == 'POST':\n        formset = EntriesFormset(request.POST)\n        if formset.is_valid():\n            # add current user and date to each entry & save\n            entries = formset.save(commit=False)\n            for entry in entries:\n                entry.creator = request.user\n                entry.date = date(int(year), int(month), int(day))\n                entry.save()\n            return HttpResponseRedirect(reverse(\"cal:month\", args=(year, month)))\n\n    else:\n        # display formset for existing enties and one extra form\n        formset = EntriesFormset(queryset=Entry.objects.filter(date__year=year,\n            date__month=month, date__day=day, creator=request.user))\n    return render_to_response(\"cal/day.html\", add_csrf(request, entries=formset, year=year,\n            month=month, day=day, other_entries=other_entries, reminders=reminders(request)),\n            context_instance=RequestContext(request))\n\n\ndef add_csrf(request, **kwargs):\n    \"\"\"Add CSRF and user to dictionary.\"\"\"\n    d = dict(user=request.user, **kwargs)\n    d.update(csrf(request))\n    return d\n"]],"start1":0,"start2":0,"length1":0,"length2":6055}]],"length":6055}
{"contributors":[],"silentsave":true,"ts":1365356978414,"patch":[[{"diffs":[[0,"rom "],[-1,"dbe.cal"],[1,"myproject"],[0,".mod"]],"start1":451,"start2":451,"length1":15,"length2":17}]],"length":6057,"saved":false}
{"ts":1365358029335,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":16,"length2":18}]],"length":6059,"saved":false}
{"ts":1365358042747,"patch":[[{"diffs":[[0,"ind=True))\n\n"],[1,"# "],[0,"@login_requi"]],"start1":1738,"start2":1738,"length1":24,"length2":26}]],"length":6061,"saved":false}
{"ts":1365358047862,"patch":[[{"diffs":[[0,"text(request))\n\n"],[1,"# "],[0,"@login_required\n"]],"start1":2959,"start2":2959,"length1":32,"length2":34}]],"length":6063,"saved":false}
{"ts":1365358052339,"patch":[[{"diffs":[[0,"uest))\n\n"],[1,"# "],[0,"@login_r"]],"start1":4504,"start2":4504,"length1":16,"length2":18}]],"length":6065,"saved":false}
{"ts":1365358240592,"patch":[[{"diffs":[[0,"tml\""],[-1,", dict(years=lst, user=request.user, year=year,\n                                                   reminders=reminders(request)),\n                                                   context_instance=RequestContext(request)"],[0,")\n\n#"]],"start1":2747,"start2":2747,"length1":229,"length2":8}]],"length":5844,"saved":false}
{"contributors":[],"silentsave":true,"ts":1365391418178,"patch":[[{"diffs":[[0,"ind=True))\n\n"],[-1,"#"],[0," @login_requ"]],"start1":1738,"start2":1738,"length1":25,"length2":24}]],"length":5843,"saved":false}
{"ts":1365391421076,"patch":[[{"diffs":[[0,"html\")\n\n"],[-1,"# "],[0,"@login_r"]],"start1":2745,"start2":2745,"length1":18,"length2":16}]],"length":5841,"saved":false}
{"ts":1365391423296,"patch":[[{"diffs":[[0,"True))\n\n"],[-1," "],[0,"@login_r"]],"start1":1742,"start2":1742,"length1":17,"length2":16}]],"length":5840,"saved":false}
{"ts":1365391426638,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[-1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":18,"length2":16}]],"length":5838,"saved":false}
{"ts":1365391432445,"patch":[[{"diffs":[[0,"uest))\n\n"],[-1,"# "],[0,"@login_r"]],"start1":4277,"start2":4277,"length1":18,"length2":16}]],"length":5836,"saved":false}
{"ts":1365398203876,"patch":[[{"diffs":[[0,"t, year="],[-1,"None"],[0,"):\n    \""]],"start1":1779,"start2":1779,"length1":20,"length2":16}]],"length":5832,"saved":false}
{"ts":1365398208338,"patch":[[{"diffs":[[0,"t, year="],[1,"2013"],[0,"):\n    \""]],"start1":1779,"start2":1779,"length1":16,"length2":20}]],"length":5836,"saved":false}
{"ts":1365398648068,"patch":[[{"diffs":[[0,"sponse(\""],[-1,"cal/"],[0,"settings"]],"start1":1065,"start2":1065,"length1":20,"length2":16}]],"length":5832,"saved":false}
{"ts":1365398652952,"patch":[[{"diffs":[[0,"sponse(\""],[1,"cal/"],[0,"settings"]],"start1":1065,"start2":1065,"length1":16,"length2":20},{"diffs":[[0,"year=201"],[-1,"3"],[0,"):\n    \""]],"start1":1782,"start2":1782,"length1":17,"length2":16}]],"length":5835,"saved":false}
{"ts":1365398655048,"patch":[[{"diffs":[[0,"nse(\"cal"],[-1,"/"],[0,"settings"]],"start1":1068,"start2":1068,"length1":17,"length2":16},{"diffs":[[0,"year=201"],[1,"3"],[0,"):\n    \""]],"start1":1781,"start2":1781,"length1":16,"length2":17}]],"length":5835,"saved":false}
{"ts":1365398723487,"patch":[[{"diffs":[[0,"nse(\"cal"],[1,"/"],[0,"settings"]],"start1":1068,"start2":1068,"length1":16,"length2":17},{"diffs":[[0,"se(\""],[-1,"cal:"],[0,"mont"]],"start1":5173,"start2":5173,"length1":12,"length2":8}]],"length":5832,"saved":false}
{"ts":1365398727979,"patch":[[{"diffs":[[0,"everse(\""],[1,"myproject.vi"],[0,"month\", "]],"start1":5169,"start2":5169,"length1":16,"length2":28}]],"length":5844,"saved":false}
{"ts":1365398729541,"patch":[[{"diffs":[[0,"oject.vi"],[1,"ews."],[0,"month\", "]],"start1":5181,"start2":5181,"length1":16,"length2":20}]],"length":5848,"saved":false}
{"ts":1365399562149,"patch":[[{"diffs":[[0,"ct.views"],[-1,"."],[0,"month\", "]],"start1":5184,"start2":5184,"length1":17,"length2":16}]],"length":5847,"saved":false}
{"ts":1365399567448,"patch":[[{"diffs":[[0,"ct.views"],[1,"."],[0,"month\", "]],"start1":5184,"start2":5184,"length1":16,"length2":17}]],"length":5848,"saved":false}
{"ts":1365399602330,"patch":[[{"diffs":[[0,"ear="],[-1,"2013"],[1,"No"],[0,"):\n "]],"start1":1783,"start2":1783,"length1":12,"length2":10}]],"length":5846,"saved":false}
{"ts":1365399603641,"patch":[[{"diffs":[[0," year=No"],[1,"ne"],[0,"):\n    \""]],"start1":1781,"start2":1781,"length1":16,"length2":18}]],"length":5848,"saved":false}
{"ts":1365399991685,"patch":[[{"diffs":[[0,"in.html\""],[1,",  dict(years=lst, user=request.user, year=year,\n                                                   reminders=reminders(request))"],[0,")\n\n@logi"]],"start1":2739,"start2":2739,"length1":16,"length2":145}]],"length":5977,"saved":false}
{"ts":1365399992830,"patch":[[{"diffs":[[0,"n.html\","],[-1," "],[0," dict(ye"]],"start1":2740,"start2":2740,"length1":17,"length2":16}]],"length":5976,"saved":false}
{"ts":1365401409663,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":16,"length2":18}]],"length":5978,"saved":false}
{"ts":1365401411198,"patch":[[{"diffs":[[0,"ind=True))\n\n"],[1,"# "],[0,"@login_requi"]],"start1":1738,"start2":1738,"length1":24,"length2":26}]],"length":5980,"saved":false}
{"ts":1365401413702,"patch":[[{"diffs":[[0,"request)))\n\n"],[1,"# "],[0,"@login_requi"]],"start1":2870,"start2":2870,"length1":24,"length2":26}]],"length":5982,"saved":false}
{"ts":1365401420202,"patch":[[{"diffs":[[0,"uest))\n\n"],[1,"# "],[0,"@login_r"]],"start1":4411,"start2":4411,"length1":16,"length2":18}]],"length":5984,"saved":false}
{"ts":1365401445783,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[-1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":18,"length2":16},{"diffs":[[0,"in_required\n"],[1,""],[0,"def settings"]],"start1":822,"start2":822,"length1":24,"length2":24},{"diffs":[[0,"ind=True))\n\n"],[-1,"# "],[0,"@login_requi"]],"start1":1736,"start2":1736,"length1":26,"length2":24},{"diffs":[[0,"in_required\n"],[1,""],[0,"def main(req"]],"start1":1752,"start2":1752,"length1":24,"length2":24},{"diffs":[[0,"request)))\n\n"],[-1,"# "],[0,"@login_requi"]],"start1":2866,"start2":2866,"length1":26,"length2":24},{"diffs":[[0,"in_required\n"],[1,""],[0,"def month(re"]],"start1":2882,"start2":2882,"length1":24,"length2":24},{"diffs":[[0,"uest))\n\n"],[-1,"# "],[0,"@login_r"]],"start1":4405,"start2":4405,"length1":18,"length2":16}]],"length":5976,"saved":false}
{"ts":1365401448717,"patch":[[{"diffs":[[0,"/main.html\","],[1," "],[0," dict(years="]],"start1":2736,"start2":2736,"length1":24,"length2":25}]],"length":5977,"saved":false}
{"ts":1365401451810,"patch":[[{"diffs":[[0,"n.html\","],[-1," "],[0," dict(ye"]],"start1":2740,"start2":2740,"length1":17,"length2":16}]],"length":5976,"saved":false}
{"ts":1365401452261,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":16,"length2":18}]],"length":5978,"saved":false}
{"ts":1365401454924,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[-1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":18,"length2":16}]],"length":5976,"saved":false}
{"contributors":[],"silentsave":true,"ts":1365440029259,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":16,"length2":18}]],"length":5978,"saved":false}
{"ts":1365440032414,"patch":[[{"diffs":[[0,"ind=True))\n\n"],[1,"# "],[0,"@login_requi"]],"start1":1738,"start2":1738,"length1":24,"length2":26}]],"length":5980,"saved":false}
{"ts":1365440036419,"patch":[[{"diffs":[[0,"request)))\n\n"],[1,"# "],[0,"@login_requi"]],"start1":2870,"start2":2870,"length1":24,"length2":26}]],"length":5982,"saved":false}
{"ts":1365440149288,"patch":[[{"diffs":[[0,"uest))\n\n"],[1,"# "],[0,"@login_r"]],"start1":4411,"start2":4411,"length1":16,"length2":18}]],"length":5984,"saved":false}
{"ts":1365440195964,"patch":[[{"diffs":[[0,"(request))\n\n"],[-1,"# "],[0,"@login_requi"]],"start1":4407,"start2":4407,"length1":26,"length2":24}]],"length":5982,"saved":false}
{"ts":1365440198758,"patch":[[{"diffs":[[0,"uest))\n\n"],[1,"# "],[0,"@login_r"]],"start1":4411,"start2":4411,"length1":16,"length2":18}]],"length":5984,"saved":false}
{"ts":1365440201419,"patch":[[{"diffs":[[0,"(request))\n\n"],[-1,"# "],[0,"@login_requi"]],"start1":4407,"start2":4407,"length1":26,"length2":24}]],"length":5982,"saved":false}
{"ts":1365440204606,"patch":[[{"diffs":[[0,"sers\"]\n\n"],[-1,"# "],[0,"@login_r"]],"start1":810,"start2":810,"length1":18,"length2":16}]],"length":5980,"saved":false}
{"ts":1365440207176,"patch":[[{"diffs":[[0,"ind=True))\n\n"],[-1,"# "],[0,"@login_requi"]],"start1":1736,"start2":1736,"length1":26,"length2":24}]],"length":5978,"saved":false}
{"ts":1365440210773,"patch":[[{"diffs":[[0,"est)))\n\n"],[-1,"# "],[0,"@login_r"]],"start1":2870,"start2":2870,"length1":18,"length2":16}]],"length":5976,"saved":false}
{"contributors":[],"silentsave":false,"ts":1365440785671,"patch":[[{"diffs":[[0,")\n\ndef remin"],[1,"s"],[0,"ders(request"]],"start1":1180,"start2":1180,"length1":24,"length2":25}]],"length":5977,"saved":false}
{"ts":1365440875787,"patch":[[{"diffs":[[0,"ef remin"],[-1,"s"],[0,"ders(req"]],"start1":1184,"start2":1184,"length1":17,"length2":16}]],"length":5976,"saved":false}
{"ts":1365441098898,"patch":[[{"diffs":[[0,"gin_required"],[1," url(r'^admin/', include(admin.site.urls)),"],[0,"\ndef day(req"]],"start1":4416,"start2":4416,"length1":24,"length2":67}]],"length":6019,"saved":false}
{"ts":1365441102186,"patch":[[{"diffs":[[0,"ired"],[-1," url(r'^admin/', include(admin.site.urls)),"],[0,"\ndef"]],"start1":4424,"start2":4424,"length1":51,"length2":8}]],"length":5976,"saved":false}
